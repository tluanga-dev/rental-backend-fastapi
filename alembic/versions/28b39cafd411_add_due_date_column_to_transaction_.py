"""Add due_date column to transaction_headers

Revision ID: 28b39cafd411
Revises: remove_header_rental_fields_002
Create Date: 2025-07-15 07:59:11.189328

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '28b39cafd411'
down_revision: Union[str, None] = 'remove_header_rental_fields_002'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_role_permissions_permission', table_name='role_permissions')
    op.drop_index('idx_role_permissions_role', table_name='role_permissions')
    op.drop_table('role_permissions')
    op.drop_index('idx_user_permissions_permission', table_name='user_permissions')
    op.drop_index('idx_user_permissions_user', table_name='user_permissions')
    op.drop_table('user_permissions')
    op.drop_index('idx_user_roles_role', table_name='user_roles')
    op.drop_index('idx_user_roles_user', table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_index('ix_permissions_id', table_name='permissions')
    op.drop_index('ix_permissions_name', table_name='permissions')
    op.drop_table('permissions')
    op.drop_index('ix_password_reset_tokens_id', table_name='password_reset_tokens')
    op.drop_index('ix_password_reset_tokens_token', table_name='password_reset_tokens')
    op.drop_table('password_reset_tokens')
    op.drop_index('ix_login_attempts_email', table_name='login_attempts')
    op.drop_index('ix_login_attempts_id', table_name='login_attempts')
    op.drop_table('login_attempts')
    op.drop_index('ix_roles_id', table_name='roles')
    op.drop_index('ix_roles_name', table_name='roles')
    op.drop_table('roles')
    op.drop_index('ix_refresh_tokens_id', table_name='refresh_tokens')
    op.drop_index('ix_refresh_tokens_token', table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index('ix_user_profiles_id', table_name='user_profiles')
    op.drop_table('user_profiles')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_index('ix_users_username', table_name='users')
    op.drop_table('users')
    op.add_column('rental_item_inspections', sa.Column('created_by', sa.String(length=255), nullable=True, comment='User who created the record'))
    op.add_column('rental_item_inspections', sa.Column('updated_by', sa.String(length=255), nullable=True, comment='User who last updated the record'))
    op.add_column('rental_item_inspections', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'))
    op.add_column('rental_item_inspections', sa.Column('deleted_by', sa.String(length=255), nullable=True, comment='User who deleted the record'))
    op.alter_column('rental_item_inspections', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Unique inspection identifier',
               existing_nullable=False)
    op.alter_column('rental_item_inspections', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_item_inspections', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_item_inspections', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Soft delete flag',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.create_index(op.f('ix_rental_item_inspections_is_active'), 'rental_item_inspections', ['is_active'], unique=False)
    op.add_column('rental_lifecycles', sa.Column('created_by', sa.String(length=255), nullable=True, comment='User who created the record'))
    op.add_column('rental_lifecycles', sa.Column('updated_by', sa.String(length=255), nullable=True, comment='User who last updated the record'))
    op.add_column('rental_lifecycles', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'))
    op.add_column('rental_lifecycles', sa.Column('deleted_by', sa.String(length=255), nullable=True, comment='User who deleted the record'))
    op.alter_column('rental_lifecycles', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Unique lifecycle identifier',
               existing_nullable=False)
    op.alter_column('rental_lifecycles', 'transaction_id',
               existing_type=sa.CHAR(length=36),
               comment='Associated transaction',
               existing_nullable=False)
    op.alter_column('rental_lifecycles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_lifecycles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_lifecycles', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Soft delete flag',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.create_index(op.f('ix_rental_lifecycles_is_active'), 'rental_lifecycles', ['is_active'], unique=False)
    op.add_column('rental_return_events', sa.Column('created_by', sa.String(length=255), nullable=True, comment='User who created the record'))
    op.add_column('rental_return_events', sa.Column('updated_by', sa.String(length=255), nullable=True, comment='User who last updated the record'))
    op.add_column('rental_return_events', sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'))
    op.add_column('rental_return_events', sa.Column('deleted_by', sa.String(length=255), nullable=True, comment='User who deleted the record'))
    op.alter_column('rental_return_events', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Unique event identifier',
               existing_nullable=False)
    op.alter_column('rental_return_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_return_events', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_return_events', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='Soft delete flag',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.create_index(op.f('ix_rental_return_events_is_active'), 'rental_return_events', ['is_active'], unique=False)
    op.alter_column('stock_movements', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Primary key UUID',
               existing_comment='Primary key',
               existing_nullable=False)
    op.alter_column('stock_movements', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record creation timestamp',
               existing_comment='Creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('stock_movements', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False,
               comment='Record last update timestamp',
               existing_comment='Last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('stock_movements', 'created_by',
               existing_type=sa.CHAR(length=36),
               type_=sa.String(length=255),
               comment='User who created the record',
               existing_comment='Created by user ID',
               existing_nullable=True)
    op.alter_column('stock_movements', 'updated_by',
               existing_type=sa.CHAR(length=36),
               type_=sa.String(length=255),
               comment='User who last updated the record',
               existing_comment='Updated by user ID',
               existing_nullable=True)
    op.add_column('transaction_headers', sa.Column('due_date', sa.Date(), nullable=True, comment='Payment due date'))
    op.add_column('transaction_headers', sa.Column('currency', sa.String(length=3), nullable=False, server_default='USD', comment='Currency code'))
    op.add_column('transaction_headers', sa.Column('exchange_rate', sa.Numeric(precision=10, scale=6), nullable=False, server_default='1.0', comment='Exchange rate to base currency'))
    op.add_column('transaction_headers', sa.Column('shipping_amount', sa.Numeric(precision=15, scale=2), nullable=False, server_default='0', comment='Shipping charges'))
    op.add_column('transaction_headers', sa.Column('deposit_paid', sa.Boolean(), nullable=False, server_default='false', comment='Whether deposit has been paid'))
    op.add_column('transaction_headers', sa.Column('return_workflow_state', sa.String(length=50), nullable=True, comment='Return workflow state'))
    op.alter_column('transaction_headers', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Unique transaction identifier',
               existing_comment='Primary key',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'transaction_number',
               existing_type=sa.VARCHAR(length=50),
               comment='Human-readable transaction number',
               existing_comment='Unique transaction number',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'transaction_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('SALE', 'PURCHASE', 'RENTAL', 'RETURN', 'ADJUSTMENT', name='transactiontype'),
               comment='Type of transaction',
               existing_comment='Transaction type',
               existing_nullable=False,
               postgresql_using='transaction_type::transactiontype')
    op.alter_column('transaction_headers', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'CANCELLED', 'ON_HOLD', 'IN_PROGRESS', name='transactionstatus'),
               comment='Current status',
               existing_comment='Transaction status',
               existing_nullable=False,
               postgresql_using='status::transactionstatus')
    op.alter_column('transaction_headers', 'transaction_date',
               existing_type=postgresql.TIMESTAMP(),
               comment='Transaction date and time',
               existing_comment='Transaction date',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'customer_id',
               existing_type=sa.CHAR(length=36),
               type_=sa.String(length=36),
               nullable=True,
               comment='Customer/Supplier UUID as string',
               existing_comment='Customer ID')
    op.alter_column('transaction_headers', 'location_id',
               existing_type=sa.CHAR(length=36),
               type_=sa.String(length=36),
               nullable=True,
               comment='Location UUID as string',
               existing_comment='Location ID')
    op.alter_column('transaction_headers', 'sales_person_id',
               existing_type=sa.CHAR(length=36),
               comment='Sales person handling transaction',
               existing_comment='Sales person ID',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'subtotal',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.Numeric(precision=15, scale=2),
               comment='Subtotal before discounts and taxes',
               existing_comment='Subtotal amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'discount_amount',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.Numeric(precision=15, scale=2),
               comment='Total discount amount',
               existing_comment='Discount amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'tax_amount',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.Numeric(precision=15, scale=2),
               comment='Total tax amount',
               existing_comment='Tax amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'total_amount',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.Numeric(precision=15, scale=2),
               comment='Final total amount',
               existing_comment='Total amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'paid_amount',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.Numeric(precision=15, scale=2),
               comment='Amount already paid',
               existing_comment='Paid amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'deposit_amount',
               existing_type=sa.NUMERIC(precision=12, scale=2),
               type_=sa.Numeric(precision=15, scale=2),
               nullable=True,
               comment='Security deposit for rentals',
               existing_comment='Deposit amount')
    op.alter_column('transaction_headers', 'reference_transaction_id',
               existing_type=sa.CHAR(length=36),
               comment='Reference to original transaction for returns',
               existing_comment='Reference transaction ID',
               existing_nullable=True)
    op.drop_index('idx_transaction_customer', table_name='transaction_headers')
    op.drop_index('idx_transaction_location', table_name='transaction_headers')
    op.drop_index('idx_transaction_payment_status', table_name='transaction_headers')
    op.drop_index('idx_transaction_sales_person', table_name='transaction_headers')
    op.drop_index('ix_transaction_headers_transaction_number', table_name='transaction_headers')
    op.create_index('idx_customer_id', 'transaction_headers', ['customer_id'], unique=False)
    op.create_index('idx_location_id', 'transaction_headers', ['location_id'], unique=False)
    op.create_index('idx_reference_transaction', 'transaction_headers', ['reference_transaction_id'], unique=False)
    op.create_unique_constraint(None, 'transaction_headers', ['transaction_number'])
    op.drop_table_comment(
        'transaction_headers',
        existing_comment='Main transaction records - reorganized into transaction_headers.py for better maintainability',
        schema=None
    )
    op.drop_column('transaction_headers', 'actual_return_date')
    op.drop_column('transaction_headers', 'payment_status')
    op.add_column('transaction_lines', sa.Column('sku', sa.String(length=100), nullable=True, comment='Stock Keeping Unit'))
    op.add_column('transaction_lines', sa.Column('category', sa.String(length=100), nullable=True, comment='Item category'))
    op.add_column('transaction_lines', sa.Column('unit_of_measure', sa.String(length=20), nullable=True, comment='Unit of measurement'))
    op.add_column('transaction_lines', sa.Column('discount_percent', sa.Numeric(precision=5, scale=2), nullable=False, server_default='0', comment='Discount percentage'))
    op.add_column('transaction_lines', sa.Column('rental_period', sa.Integer(), nullable=True, comment='Rental period for this item'))
    op.add_column('transaction_lines', sa.Column('daily_rate', sa.Numeric(precision=10, scale=2), nullable=True, comment='Daily rental rate'))
    op.add_column('transaction_lines', sa.Column('location_id', sa.String(length=36), nullable=True, comment='Fulfillment location UUID as string'))
    op.add_column('transaction_lines', sa.Column('warehouse_location', sa.String(length=100), nullable=True, comment='Specific warehouse location'))
    op.add_column('transaction_lines', sa.Column('status', sa.String(length=20), nullable=False, server_default='PENDING', comment='Line item status'))
    op.add_column('transaction_lines', sa.Column('fulfillment_status', sa.String(length=20), nullable=False, server_default='PENDING', comment='Fulfillment status'))
    op.add_column('transaction_lines', sa.Column('return_condition', sa.String(length=1), nullable=True, comment='Return condition (A-D)'))
    op.add_column('transaction_lines', sa.Column('return_to_stock', sa.Boolean(), nullable=True, comment='Whether to return to stock'))
    op.add_column('transaction_lines', sa.Column('inspection_status', sa.String(length=20), nullable=True, comment='Inspection status for returns'))
    op.alter_column('transaction_lines', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Unique line item identifier',
               existing_comment='Primary key',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'transaction_id',
               existing_type=sa.CHAR(length=36),
               comment='Parent transaction ID',
               existing_comment='Transaction ID',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'line_number',
               existing_type=sa.INTEGER(),
               comment='Line sequence number within transaction',
               existing_comment='Line number',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'line_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PRODUCT', 'SERVICE', 'DISCOUNT', 'TAX', 'SHIPPING', 'FEE', name='lineitemtype'),
               comment='Type of line item',
               existing_comment='Line item type',
               existing_nullable=False,
               postgresql_using='line_type::lineitemtype')
    op.alter_column('transaction_lines', 'item_id',
               existing_type=sa.CHAR(length=36),
               type_=sa.String(length=36),
               comment='Item/Product UUID as string',
               existing_comment='Item ID',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'inventory_unit_id',
               existing_type=sa.CHAR(length=36),
               type_=sa.String(length=36),
               comment='Specific inventory unit for serialized items',
               existing_comment='Inventory unit ID',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'description',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.Text(),
               comment='Line item description',
               existing_comment='Line description',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'quantity',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Quantity ordered/sold',
               existing_comment='Quantity',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'unit_price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Price per unit',
               existing_comment='Unit price',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'tax_rate',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment='Tax rate percentage',
               existing_comment='Tax rate',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'line_total',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Total for this line item',
               existing_comment='Line total',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'rental_start_date',
               existing_type=sa.DATE(),
               comment='Item rental start date',
               existing_comment='Rental start date',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'rental_end_date',
               existing_type=sa.DATE(),
               comment='Item rental end date',
               existing_comment='Rental end date',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'current_rental_status',
               existing_type=postgresql.ENUM('ACTIVE', 'LATE', 'EXTENDED', 'PARTIAL_RETURN', 'LATE_PARTIAL_RETURN', 'COMPLETED', name='rentalstatus'),
               comment='Current rental status for this item',
               existing_nullable=True)
    op.drop_index('idx_transaction_line_inventory_unit', table_name='transaction_lines')
    op.drop_index('idx_transaction_line_item', table_name='transaction_lines')
    op.drop_index('idx_transaction_line_number', table_name='transaction_lines')
    op.drop_index('idx_transaction_line_rental_dates', table_name='transaction_lines')
    op.drop_index('idx_transaction_line_returned_qty', table_name='transaction_lines')
    op.drop_index('idx_transaction_line_transaction', table_name='transaction_lines')
    op.drop_index('idx_transaction_line_type', table_name='transaction_lines')
    op.drop_index('idx_transaction_lines_rental_status', table_name='transaction_lines')
    op.create_index('idx_fulfillment_status', 'transaction_lines', ['fulfillment_status'], unique=False)
    op.create_index('idx_inventory_unit_id', 'transaction_lines', ['inventory_unit_id'], unique=False)
    op.create_index('idx_item_id', 'transaction_lines', ['item_id'], unique=False)
    op.create_index('idx_line_number', 'transaction_lines', ['transaction_id', 'line_number'], unique=False)
    op.create_index('idx_rental_dates', 'transaction_lines', ['rental_start_date', 'rental_end_date'], unique=False)
    op.create_index('idx_rental_status', 'transaction_lines', ['current_rental_status'], unique=False)
    op.create_index('idx_sku', 'transaction_lines', ['sku'], unique=False)
    op.create_index('idx_status', 'transaction_lines', ['status'], unique=False)
    op.create_index('idx_transaction_id', 'transaction_lines', ['transaction_id'], unique=False)
    op.create_unique_constraint('uq_transaction_line_number', 'transaction_lines', ['transaction_id', 'line_number'])
    op.drop_constraint('transaction_lines_item_id_fkey', 'transaction_lines', type_='foreignkey')
    op.drop_constraint('transaction_lines_inventory_unit_id_fkey', 'transaction_lines', type_='foreignkey')
    op.drop_table_comment(
        'transaction_lines',
        existing_comment='Transaction line items - reorganized into transaction_lines.py for better maintainability',
        schema=None
    )
    op.drop_column('transaction_lines', 'discount_percentage')
    op.drop_column('transaction_lines', 'rental_period_value')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('transaction_lines', sa.Column('rental_period_value', sa.INTEGER(), autoincrement=False, nullable=True, comment='Rental period value'))
    op.add_column('transaction_lines', sa.Column('discount_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=False, comment='Discount percentage'))
    op.create_table_comment(
        'transaction_lines',
        'Transaction line items - reorganized into transaction_lines.py for better maintainability',
        existing_comment=None,
        schema=None
    )
    op.create_foreign_key('transaction_lines_inventory_unit_id_fkey', 'transaction_lines', 'inventory_units', ['inventory_unit_id'], ['id'])
    op.create_foreign_key('transaction_lines_item_id_fkey', 'transaction_lines', 'items', ['item_id'], ['id'])
    op.drop_constraint('uq_transaction_line_number', 'transaction_lines', type_='unique')
    op.drop_index('idx_transaction_id', table_name='transaction_lines')
    op.drop_index('idx_status', table_name='transaction_lines')
    op.drop_index('idx_sku', table_name='transaction_lines')
    op.drop_index('idx_rental_status', table_name='transaction_lines')
    op.drop_index('idx_rental_dates', table_name='transaction_lines')
    op.drop_index('idx_line_number', table_name='transaction_lines')
    op.drop_index('idx_item_id', table_name='transaction_lines')
    op.drop_index('idx_inventory_unit_id', table_name='transaction_lines')
    op.drop_index('idx_fulfillment_status', table_name='transaction_lines')
    op.create_index('idx_transaction_lines_rental_status', 'transaction_lines', ['current_rental_status'], unique=False)
    op.create_index('idx_transaction_line_type', 'transaction_lines', ['line_type'], unique=False)
    op.create_index('idx_transaction_line_transaction', 'transaction_lines', ['transaction_id'], unique=False)
    op.create_index('idx_transaction_line_returned_qty', 'transaction_lines', ['returned_quantity', 'quantity'], unique=False)
    op.create_index('idx_transaction_line_rental_dates', 'transaction_lines', ['rental_start_date', 'rental_end_date'], unique=False)
    op.create_index('idx_transaction_line_number', 'transaction_lines', ['transaction_id', 'line_number'], unique=False)
    op.create_index('idx_transaction_line_item', 'transaction_lines', ['item_id'], unique=False)
    op.create_index('idx_transaction_line_inventory_unit', 'transaction_lines', ['inventory_unit_id'], unique=False)
    op.alter_column('transaction_lines', 'current_rental_status',
               existing_type=postgresql.ENUM('ACTIVE', 'LATE', 'EXTENDED', 'PARTIAL_RETURN', 'LATE_PARTIAL_RETURN', 'COMPLETED', name='rentalstatus'),
               comment=None,
               existing_comment='Current rental status for this item',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'rental_end_date',
               existing_type=sa.DATE(),
               comment='Rental end date',
               existing_comment='Item rental end date',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'rental_start_date',
               existing_type=sa.DATE(),
               comment='Rental start date',
               existing_comment='Item rental start date',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'line_total',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Line total',
               existing_comment='Total for this line item',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'tax_rate',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment='Tax rate',
               existing_comment='Tax rate percentage',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'unit_price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Unit price',
               existing_comment='Price per unit',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'quantity',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               comment='Quantity',
               existing_comment='Quantity ordered/sold',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'description',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(length=500),
               comment='Line description',
               existing_comment='Line item description',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'inventory_unit_id',
               existing_type=sa.String(length=36),
               type_=sa.CHAR(length=36),
               comment='Inventory unit ID',
               existing_comment='Specific inventory unit for serialized items',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'item_id',
               existing_type=sa.String(length=36),
               type_=sa.CHAR(length=36),
               comment='Item ID',
               existing_comment='Item/Product UUID as string',
               existing_nullable=True)
    op.alter_column('transaction_lines', 'line_type',
               existing_type=sa.Enum('PRODUCT', 'SERVICE', 'DISCOUNT', 'TAX', 'SHIPPING', 'FEE', name='lineitemtype'),
               type_=sa.VARCHAR(length=20),
               comment='Line item type',
               existing_comment='Type of line item',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'line_number',
               existing_type=sa.INTEGER(),
               comment='Line number',
               existing_comment='Line sequence number within transaction',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'transaction_id',
               existing_type=sa.CHAR(length=36),
               comment='Transaction ID',
               existing_comment='Parent transaction ID',
               existing_nullable=False)
    op.alter_column('transaction_lines', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Primary key',
               existing_comment='Unique line item identifier',
               existing_nullable=False)
    op.drop_column('transaction_lines', 'inspection_status')
    op.drop_column('transaction_lines', 'return_to_stock')
    op.drop_column('transaction_lines', 'return_condition')
    op.drop_column('transaction_lines', 'fulfillment_status')
    op.drop_column('transaction_lines', 'status')
    op.drop_column('transaction_lines', 'warehouse_location')
    op.drop_column('transaction_lines', 'location_id')
    op.drop_column('transaction_lines', 'daily_rate')
    op.drop_column('transaction_lines', 'rental_period')
    op.drop_column('transaction_lines', 'discount_percent')
    op.drop_column('transaction_lines', 'unit_of_measure')
    op.drop_column('transaction_lines', 'category')
    op.drop_column('transaction_lines', 'sku')
    op.add_column('transaction_headers', sa.Column('payment_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Payment status'))
    op.add_column('transaction_headers', sa.Column('actual_return_date', sa.DATE(), autoincrement=False, nullable=True, comment='Actual return date'))
    op.create_table_comment(
        'transaction_headers',
        'Main transaction records - reorganized into transaction_headers.py for better maintainability',
        existing_comment=None,
        schema=None
    )
    op.drop_constraint(None, 'transaction_headers', type_='unique')
    op.drop_index('idx_reference_transaction', table_name='transaction_headers')
    op.drop_index('idx_location_id', table_name='transaction_headers')
    op.drop_index('idx_customer_id', table_name='transaction_headers')
    op.create_index('ix_transaction_headers_transaction_number', 'transaction_headers', ['transaction_number'], unique=False)
    op.create_index('idx_transaction_sales_person', 'transaction_headers', ['sales_person_id'], unique=False)
    op.create_index('idx_transaction_payment_status', 'transaction_headers', ['payment_status'], unique=False)
    op.create_index('idx_transaction_location', 'transaction_headers', ['location_id'], unique=False)
    op.create_index('idx_transaction_customer', 'transaction_headers', ['customer_id'], unique=False)
    op.alter_column('transaction_headers', 'reference_transaction_id',
               existing_type=sa.CHAR(length=36),
               comment='Reference transaction ID',
               existing_comment='Reference to original transaction for returns',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'deposit_amount',
               existing_type=sa.Numeric(precision=15, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               nullable=False,
               comment='Deposit amount',
               existing_comment='Security deposit for rentals')
    op.alter_column('transaction_headers', 'paid_amount',
               existing_type=sa.Numeric(precision=15, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               comment='Paid amount',
               existing_comment='Amount already paid',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'total_amount',
               existing_type=sa.Numeric(precision=15, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               comment='Total amount',
               existing_comment='Final total amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'tax_amount',
               existing_type=sa.Numeric(precision=15, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               comment='Tax amount',
               existing_comment='Total tax amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'discount_amount',
               existing_type=sa.Numeric(precision=15, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               comment='Discount amount',
               existing_comment='Total discount amount',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'subtotal',
               existing_type=sa.Numeric(precision=15, scale=2),
               type_=sa.NUMERIC(precision=12, scale=2),
               comment='Subtotal amount',
               existing_comment='Subtotal before discounts and taxes',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'sales_person_id',
               existing_type=sa.CHAR(length=36),
               comment='Sales person ID',
               existing_comment='Sales person handling transaction',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'location_id',
               existing_type=sa.String(length=36),
               type_=sa.CHAR(length=36),
               nullable=False,
               comment='Location ID',
               existing_comment='Location UUID as string')
    op.alter_column('transaction_headers', 'customer_id',
               existing_type=sa.String(length=36),
               type_=sa.CHAR(length=36),
               nullable=False,
               comment='Customer ID',
               existing_comment='Customer/Supplier UUID as string')
    op.alter_column('transaction_headers', 'transaction_date',
               existing_type=postgresql.TIMESTAMP(),
               comment='Transaction date',
               existing_comment='Transaction date and time',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'status',
               existing_type=sa.Enum('PENDING', 'PROCESSING', 'COMPLETED', 'CANCELLED', 'ON_HOLD', 'IN_PROGRESS', name='transactionstatus'),
               type_=sa.VARCHAR(length=20),
               comment='Transaction status',
               existing_comment='Current status',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'transaction_type',
               existing_type=sa.Enum('SALE', 'PURCHASE', 'RENTAL', 'RETURN', 'ADJUSTMENT', name='transactiontype'),
               type_=sa.VARCHAR(length=20),
               comment='Transaction type',
               existing_comment='Type of transaction',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'transaction_number',
               existing_type=sa.VARCHAR(length=50),
               comment='Unique transaction number',
               existing_comment='Human-readable transaction number',
               existing_nullable=False)
    op.alter_column('transaction_headers', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Primary key',
               existing_comment='Unique transaction identifier',
               existing_nullable=False)
    op.drop_column('transaction_headers', 'return_workflow_state')
    op.drop_column('transaction_headers', 'deposit_paid')
    op.drop_column('transaction_headers', 'shipping_amount')
    op.drop_column('transaction_headers', 'exchange_rate')
    op.drop_column('transaction_headers', 'currency')
    op.drop_column('transaction_headers', 'due_date')
    op.alter_column('stock_movements', 'updated_by',
               existing_type=sa.String(length=255),
               type_=sa.CHAR(length=36),
               comment='Updated by user ID',
               existing_comment='User who last updated the record',
               existing_nullable=True)
    op.alter_column('stock_movements', 'created_by',
               existing_type=sa.String(length=255),
               type_=sa.CHAR(length=36),
               comment='Created by user ID',
               existing_comment='User who created the record',
               existing_nullable=True)
    op.alter_column('stock_movements', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment='Last update timestamp',
               existing_comment='Record last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('stock_movements', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment='Creation timestamp',
               existing_comment='Record creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('stock_movements', 'id',
               existing_type=sa.CHAR(length=36),
               comment='Primary key',
               existing_comment='Primary key UUID',
               existing_nullable=False)
    op.drop_index(op.f('ix_rental_return_events_is_active'), table_name='rental_return_events')
    op.alter_column('rental_return_events', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Soft delete flag',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('rental_return_events', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Record last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_return_events', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Record creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_return_events', 'id',
               existing_type=sa.CHAR(length=36),
               comment=None,
               existing_comment='Unique event identifier',
               existing_nullable=False)
    op.drop_column('rental_return_events', 'deleted_by')
    op.drop_column('rental_return_events', 'deleted_at')
    op.drop_column('rental_return_events', 'updated_by')
    op.drop_column('rental_return_events', 'created_by')
    op.drop_index(op.f('ix_rental_lifecycles_is_active'), table_name='rental_lifecycles')
    op.alter_column('rental_lifecycles', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Soft delete flag',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('rental_lifecycles', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Record last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_lifecycles', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Record creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_lifecycles', 'transaction_id',
               existing_type=sa.CHAR(length=36),
               comment=None,
               existing_comment='Associated transaction',
               existing_nullable=False)
    op.alter_column('rental_lifecycles', 'id',
               existing_type=sa.CHAR(length=36),
               comment=None,
               existing_comment='Unique lifecycle identifier',
               existing_nullable=False)
    op.drop_column('rental_lifecycles', 'deleted_by')
    op.drop_column('rental_lifecycles', 'deleted_at')
    op.drop_column('rental_lifecycles', 'updated_by')
    op.drop_column('rental_lifecycles', 'created_by')
    op.drop_index(op.f('ix_rental_item_inspections_is_active'), table_name='rental_item_inspections')
    op.alter_column('rental_item_inspections', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='Soft delete flag',
               existing_nullable=False,
               existing_server_default=sa.text('true'))
    op.alter_column('rental_item_inspections', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Record last update timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_item_inspections', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True,
               comment=None,
               existing_comment='Record creation timestamp',
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('rental_item_inspections', 'id',
               existing_type=sa.CHAR(length=36),
               comment=None,
               existing_comment='Unique inspection identifier',
               existing_nullable=False)
    op.drop_column('rental_item_inspections', 'deleted_by')
    op.drop_column('rental_item_inspections', 'deleted_at')
    op.drop_column('rental_item_inspections', 'updated_by')
    op.drop_column('rental_item_inspections', 'created_by')
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_superuser', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('user_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('email_verified_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_username', 'users', ['username'], unique=False)
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_index('ix_users_email', 'users', ['email'], unique=False)
    op.create_table('user_profiles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('last_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('date_of_birth', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('gender', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('address_line1', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('address_line2', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('country', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('website', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('linkedin', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('twitter', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('github', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('theme', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email_notifications', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('sms_notifications', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('push_notifications', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_profiles_pkey'),
    sa.UniqueConstraint('user_id', name='user_profiles_user_id_key')
    )
    op.create_index('ix_user_profiles_id', 'user_profiles', ['id'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('device_info', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='refresh_tokens_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='refresh_tokens_pkey')
    )
    op.create_index('ix_refresh_tokens_token', 'refresh_tokens', ['token'], unique=False)
    op.create_index('ix_refresh_tokens_id', 'refresh_tokens', ['id'], unique=False)
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('roles_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_system_role', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_roles_name', 'roles', ['name'], unique=False)
    op.create_index('ix_roles_id', 'roles', ['id'], unique=False)
    op.create_table('login_attempts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('attempted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('failure_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='login_attempts_pkey')
    )
    op.create_index('ix_login_attempts_id', 'login_attempts', ['id'], unique=False)
    op.create_index('ix_login_attempts_email', 'login_attempts', ['email'], unique=False)
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='password_reset_tokens_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='password_reset_tokens_pkey')
    )
    op.create_index('ix_password_reset_tokens_token', 'password_reset_tokens', ['token'], unique=False)
    op.create_index('ix_password_reset_tokens_id', 'password_reset_tokens', ['id'], unique=False)
    op.create_table('permissions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('permissions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resource', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('is_system_permission', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_permissions_name', 'permissions', ['name'], unique=False)
    op.create_index('ix_permissions_id', 'permissions', ['id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name='user_roles_pkey')
    )
    op.create_index('idx_user_roles_user', 'user_roles', ['user_id'], unique=False)
    op.create_index('idx_user_roles_role', 'user_roles', ['role_id'], unique=False)
    op.create_table('user_permissions',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('granted_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('granted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['granted_by'], ['users.id'], name='user_permissions_granted_by_fkey'),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='user_permissions_permission_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_permissions_user_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', 'permission_id', name='user_permissions_pkey')
    )
    op.create_index('idx_user_permissions_user', 'user_permissions', ['user_id'], unique=False)
    op.create_index('idx_user_permissions_permission', 'user_permissions', ['permission_id'], unique=False)
    op.create_table('role_permissions',
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='role_permissions_permission_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='role_permissions_role_id_fkey'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id', name='role_permissions_pkey')
    )
    op.create_index('idx_role_permissions_role', 'role_permissions', ['role_id'], unique=False)
    op.create_index('idx_role_permissions_permission', 'role_permissions', ['permission_id'], unique=False)
    # ### end Alembic commands ###