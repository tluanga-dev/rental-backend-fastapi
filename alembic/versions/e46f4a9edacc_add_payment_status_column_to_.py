"""Add payment_status column to transaction_headers

Revision ID: e46f4a9edacc
Revises: dfe34db039fb
Create Date: 2025-07-19 11:00:12.048687

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e46f4a9edacc'
down_revision: Union[str, None] = 'dfe34db039fb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('rental_lines')
    op.drop_table('sales')
    op.drop_table('rent_return_lines')
    op.drop_index('idx_company_gst_no', table_name='companies')
    op.drop_index('idx_company_is_active', table_name='companies')
    op.drop_index('idx_company_name', table_name='companies')
    op.drop_index('idx_company_name_active', table_name='companies')
    op.drop_index('idx_company_registration_number', table_name='companies')
    op.drop_table('companies')
    op.drop_table('sale_lines')
    op.drop_index('ix_rent_return_inspections_is_active', table_name='rent_return_inspections')
    op.drop_table('rent_return_inspections')
    op.drop_table('purchase_lines')
    op.drop_index('ix_rental_extensions_is_active', table_name='rental_extensions')
    op.drop_table('rental_extensions')
    op.drop_table('rentals')
    op.drop_table('purchases')
    op.drop_table('rent_returns')
    op.drop_column('login_attempts', 'updated_at')
    op.drop_column('login_attempts', 'created_at')
    op.drop_column('password_reset_tokens', 'updated_at')
    op.drop_column('password_reset_tokens', 'created_at')
    op.drop_column('permissions', 'updated_at')
    op.drop_column('permissions', 'created_at')
    op.drop_column('refresh_tokens', 'updated_at')
    op.drop_column('refresh_tokens', 'created_at')
    op.drop_column('roles', 'updated_at')
    op.drop_column('roles', 'created_at')
    op.alter_column('transaction_headers', 'payment_status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('PENDING', 'PAID', 'PARTIAL', 'FAILED', 'REFUNDED', name='paymentstatus'),
               nullable=False,
               comment='Payment status')
    op.alter_column('transaction_headers', 'delivery_required',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='Whether delivery is required',
               existing_server_default=sa.text('false'))
    op.alter_column('transaction_headers', 'delivery_address',
               existing_type=sa.TEXT(),
               comment='Delivery address if delivery is required',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'delivery_date',
               existing_type=sa.DATE(),
               comment='Scheduled delivery date',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'delivery_time',
               existing_type=postgresql.TIME(),
               comment='Scheduled delivery time',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'pickup_required',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='Whether pickup is required',
               existing_server_default=sa.text('false'))
    op.alter_column('transaction_headers', 'pickup_date',
               existing_type=sa.DATE(),
               comment='Scheduled pickup date',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'pickup_time',
               existing_type=postgresql.TIME(),
               comment='Scheduled pickup time',
               existing_nullable=True)
    op.create_index('idx_delivery_date', 'transaction_headers', ['delivery_date'], unique=False)
    op.create_index('idx_delivery_required', 'transaction_headers', ['delivery_required'], unique=False)
    op.create_index('idx_pickup_date', 'transaction_headers', ['pickup_date'], unique=False)
    op.create_index('idx_pickup_required', 'transaction_headers', ['pickup_required'], unique=False)
    op.drop_column('transaction_headers', 'rental_end_date')
    op.drop_column('transaction_headers', 'current_rental_status')
    op.drop_column('transaction_headers', 'rental_start_date')
    op.drop_column('transaction_headers', 'actual_return_date')
    op.drop_column('transaction_headers', 'rental_period_unit')
    op.drop_column('transaction_headers', 'rental_period')
    op.drop_column('user_profiles', 'updated_at')
    op.drop_column('user_profiles', 'created_at')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('user_profiles', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('transaction_headers', sa.Column('rental_period', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('transaction_headers', sa.Column('rental_period_unit', sa.VARCHAR(length=10), autoincrement=False, nullable=True))
    op.add_column('transaction_headers', sa.Column('actual_return_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('transaction_headers', sa.Column('rental_start_date', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('transaction_headers', sa.Column('current_rental_status', sa.VARCHAR(length=30), autoincrement=False, nullable=True))
    op.add_column('transaction_headers', sa.Column('rental_end_date', sa.DATE(), autoincrement=False, nullable=True))
    op.drop_index('idx_pickup_required', table_name='transaction_headers')
    op.drop_index('idx_pickup_date', table_name='transaction_headers')
    op.drop_index('idx_delivery_required', table_name='transaction_headers')
    op.drop_index('idx_delivery_date', table_name='transaction_headers')
    op.alter_column('transaction_headers', 'pickup_time',
               existing_type=postgresql.TIME(),
               comment=None,
               existing_comment='Scheduled pickup time',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'pickup_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Scheduled pickup date',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'pickup_required',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='Whether pickup is required',
               existing_server_default=sa.text('false'))
    op.alter_column('transaction_headers', 'delivery_time',
               existing_type=postgresql.TIME(),
               comment=None,
               existing_comment='Scheduled delivery time',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'delivery_date',
               existing_type=sa.DATE(),
               comment=None,
               existing_comment='Scheduled delivery date',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'delivery_address',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Delivery address if delivery is required',
               existing_nullable=True)
    op.alter_column('transaction_headers', 'delivery_required',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='Whether delivery is required',
               existing_server_default=sa.text('false'))
    op.alter_column('transaction_headers', 'payment_status',
               existing_type=sa.Enum('PENDING', 'PAID', 'PARTIAL', 'FAILED', 'REFUNDED', name='paymentstatus'),
               type_=sa.VARCHAR(length=20),
               nullable=True,
               comment=None,
               existing_comment='Payment status')
    op.add_column('roles', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('roles', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('refresh_tokens', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('refresh_tokens', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('permissions', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('permissions', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('password_reset_tokens', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('password_reset_tokens', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('login_attempts', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('login_attempts', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.create_table('rent_returns',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('return_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Return number'),
    sa.Column('original_rental_id', sa.CHAR(length=36), autoincrement=False, nullable=False, comment='Original rental transaction'),
    sa.Column('return_date', sa.DATE(), autoincrement=False, nullable=False, comment='Date of return'),
    sa.Column('return_reason', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Reason for return'),
    sa.Column('inspection_completed', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Inspection completed'),
    sa.Column('inspection_date', sa.DATE(), autoincrement=False, nullable=True, comment='Date of inspection'),
    sa.Column('inspected_by', sa.VARCHAR(length=36), autoincrement=False, nullable=True, comment='Who performed the inspection'),
    sa.Column('total_damage_cost', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Total damage cost'),
    sa.Column('damage_deposit_deducted', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Amount deducted from deposit'),
    sa.Column('cleaning_required', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Cleaning required'),
    sa.Column('cleaning_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Cleaning cost'),
    sa.Column('late_return', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Late return'),
    sa.Column('late_fee_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Late fee amount'),
    sa.Column('deposit_refund_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Deposit refund amount'),
    sa.Column('deposit_refund_processed', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Deposit refund processed'),
    sa.Column('deposit_refund_date', sa.DATE(), autoincrement=False, nullable=True, comment='Date deposit was refunded'),
    sa.ForeignKeyConstraint(['id'], ['transaction_headers.id'], name='rent_returns_id_fkey'),
    sa.ForeignKeyConstraint(['original_rental_id'], ['transaction_headers.id'], name='rent_returns_original_rental_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rent_returns_pkey'),
    sa.UniqueConstraint('return_number', name='rent_returns_return_number_key')
    )
    op.create_table('purchases',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('purchase_order_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Purchase order number'),
    sa.Column('supplier_invoice_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment="Supplier's invoice number"),
    sa.Column('supplier_id', sa.VARCHAR(length=36), autoincrement=False, nullable=True, comment='Supplier UUID as string'),
    sa.Column('expected_date', sa.DATE(), autoincrement=False, nullable=True, comment='Expected delivery date'),
    sa.Column('received_date', sa.DATE(), autoincrement=False, nullable=True, comment='Date when order was received'),
    sa.Column('payment_terms', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Payment terms (e.g., Net 30)'),
    sa.Column('freight_terms', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Freight terms (e.g., FOB)'),
    sa.Column('approval_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Approval status'),
    sa.Column('approved_by', sa.VARCHAR(length=36), autoincrement=False, nullable=True, comment='User who approved the purchase'),
    sa.Column('approved_date', sa.DATE(), autoincrement=False, nullable=True, comment='Date when purchase was approved'),
    sa.ForeignKeyConstraint(['id'], ['transaction_headers.id'], name='purchases_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='purchases_pkey'),
    sa.UniqueConstraint('purchase_order_number', name='purchases_purchase_order_number_key')
    )
    op.create_table('rentals',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('rental_agreement_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Rental agreement number'),
    sa.Column('rental_start_date', sa.DATE(), autoincrement=False, nullable=True, comment='Rental start date'),
    sa.Column('rental_end_date', sa.DATE(), autoincrement=False, nullable=True, comment='Rental end date'),
    sa.Column('actual_return_date', sa.DATE(), autoincrement=False, nullable=True, comment='Actual return date'),
    sa.Column('rental_period', sa.INTEGER(), autoincrement=False, nullable=True, comment='Rental period'),
    sa.Column('rental_period_unit', sa.VARCHAR(length=20), autoincrement=False, nullable=True, comment='Rental period unit'),
    sa.Column('daily_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True, comment='Daily rental rate'),
    sa.Column('security_deposit_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=True, comment='Security deposit amount'),
    sa.Column('security_deposit_paid', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Security deposit paid'),
    sa.Column('late_fee_rate', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True, comment='Late fee rate per day'),
    sa.Column('late_fee_amount', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Accumulated late fees'),
    sa.Column('extension_count', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of extensions'),
    sa.Column('max_extensions_allowed', sa.INTEGER(), autoincrement=False, nullable=False, comment='Maximum extensions allowed'),
    sa.Column('rental_status', sa.VARCHAR(length=30), autoincrement=False, nullable=False, comment='Current rental status'),
    sa.ForeignKeyConstraint(['id'], ['transaction_headers.id'], name='rentals_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rentals_pkey'),
    sa.UniqueConstraint('rental_agreement_number', name='rentals_rental_agreement_number_key')
    )
    op.create_table('rental_extensions',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False, comment='Unique extension identifier'),
    sa.Column('rental_id', sa.CHAR(length=36), autoincrement=False, nullable=False, comment='Reference to rental'),
    sa.Column('extension_number', sa.INTEGER(), autoincrement=False, nullable=False, comment='Extension sequence number'),
    sa.Column('original_end_date', sa.DATE(), autoincrement=False, nullable=False, comment='Original end date'),
    sa.Column('new_end_date', sa.DATE(), autoincrement=False, nullable=False, comment='New end date'),
    sa.Column('extension_days', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of days extended'),
    sa.Column('extension_fee', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Extension fee charged'),
    sa.Column('requested_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False, comment='When extension was requested'),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='When extension was approved'),
    sa.Column('approved_by', sa.VARCHAR(length=36), autoincrement=False, nullable=True, comment='Who approved the extension'),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True, comment='Reason for extension'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who created the record'),
    sa.Column('updated_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who last updated the record'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Soft delete flag'),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Soft delete timestamp'),
    sa.Column('deleted_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who deleted the record'),
    sa.ForeignKeyConstraint(['rental_id'], ['transaction_headers.id'], name='rental_extensions_rental_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rental_extensions_pkey')
    )
    op.create_index('ix_rental_extensions_is_active', 'rental_extensions', ['is_active'], unique=False)
    op.create_table('purchase_lines',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('supplier_item_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment="Supplier's item code"),
    sa.Column('received_quantity', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Quantity received'),
    sa.Column('pending_quantity', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Quantity pending receipt'),
    sa.Column('inspection_required', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Whether inspection is required'),
    sa.Column('quality_rating', sa.VARCHAR(length=1), autoincrement=False, nullable=True, comment='Quality rating (A-F)'),
    sa.ForeignKeyConstraint(['id'], ['transaction_lines.id'], name='purchase_lines_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='purchase_lines_pkey')
    )
    op.create_table('rent_return_inspections',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False, comment='Unique inspection identifier'),
    sa.Column('return_id', sa.CHAR(length=36), autoincrement=False, nullable=False, comment='Reference to return transaction'),
    sa.Column('inspection_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Type of inspection'),
    sa.Column('inspection_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False, comment='Inspection date'),
    sa.Column('inspector_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False, comment='Inspector user ID'),
    sa.Column('overall_condition', sa.VARCHAR(length=1), autoincrement=False, nullable=False, comment='Overall condition grade'),
    sa.Column('inspection_notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Detailed inspection notes'),
    sa.Column('damage_items', sa.TEXT(), autoincrement=False, nullable=True, comment='JSON list of damaged items'),
    sa.Column('total_damage_value', sa.NUMERIC(precision=15, scale=2), autoincrement=False, nullable=False, comment='Total damage value'),
    sa.Column('photos', sa.TEXT(), autoincrement=False, nullable=True, comment='URLs of inspection photos'),
    sa.Column('documents', sa.TEXT(), autoincrement=False, nullable=True, comment='URLs of related documents'),
    sa.Column('approved', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Inspection approved'),
    sa.Column('approved_by', sa.VARCHAR(length=36), autoincrement=False, nullable=True, comment='Who approved the inspection'),
    sa.Column('approved_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True, comment='Approval date'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who created the record'),
    sa.Column('updated_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who last updated the record'),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Soft delete flag'),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Soft delete timestamp'),
    sa.Column('deleted_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who deleted the record'),
    sa.ForeignKeyConstraint(['return_id'], ['transaction_headers.id'], name='rent_return_inspections_return_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rent_return_inspections_pkey')
    )
    op.create_index('ix_rent_return_inspections_is_active', 'rent_return_inspections', ['is_active'], unique=False)
    op.create_table('sale_lines',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('customer_item_code', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment="Customer's item code"),
    sa.Column('shipped_quantity', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Quantity shipped'),
    sa.Column('backorder_quantity', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Quantity on backorder'),
    sa.ForeignKeyConstraint(['id'], ['transaction_lines.id'], name='sale_lines_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sale_lines_pkey')
    )
    op.create_table('companies',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False, comment='Primary key'),
    sa.Column('company_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='Company name'),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True, comment='Company address'),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='Company email'),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Company phone number'),
    sa.Column('gst_no', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='GST registration number'),
    sa.Column('registration_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Company registration number'),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment='Soft delete flag'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='Record last update timestamp'),
    sa.Column('created_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who created the record'),
    sa.Column('updated_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who last updated the record'),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='Soft delete timestamp'),
    sa.Column('deleted_by', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='User who deleted the record'),
    sa.PrimaryKeyConstraint('id', name='companies_pkey'),
    sa.UniqueConstraint('company_name', name='companies_company_name_key'),
    sa.UniqueConstraint('gst_no', name='companies_gst_no_key'),
    sa.UniqueConstraint('registration_number', name='companies_registration_number_key')
    )
    op.create_index('idx_company_registration_number', 'companies', ['registration_number'], unique=False)
    op.create_index('idx_company_name_active', 'companies', ['company_name', 'is_active'], unique=False)
    op.create_index('idx_company_name', 'companies', ['company_name'], unique=False)
    op.create_index('idx_company_is_active', 'companies', ['is_active'], unique=False)
    op.create_index('idx_company_gst_no', 'companies', ['gst_no'], unique=False)
    op.create_table('rent_return_lines',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('original_rental_line_id', sa.CHAR(length=36), autoincrement=False, nullable=False, comment='Original rental line'),
    sa.Column('condition_on_return', sa.VARCHAR(length=1), autoincrement=False, nullable=False, comment='Item condition on return (A-F)'),
    sa.Column('damage_noted', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Damage noted'),
    sa.Column('damage_description', sa.TEXT(), autoincrement=False, nullable=True, comment='Detailed damage description'),
    sa.Column('damage_photos', sa.TEXT(), autoincrement=False, nullable=True, comment='URLs of damage photos'),
    sa.Column('repair_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Estimated repair cost'),
    sa.Column('cleaning_notes', sa.TEXT(), autoincrement=False, nullable=True, comment='Cleaning notes'),
    sa.Column('cleaning_fee', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Cleaning fee for this item'),
    sa.Column('return_to_inventory', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Return item to inventory'),
    sa.Column('inventory_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Inventory location'),
    sa.ForeignKeyConstraint(['id'], ['transaction_lines.id'], name='rent_return_lines_id_fkey'),
    sa.ForeignKeyConstraint(['original_rental_line_id'], ['transaction_lines.id'], name='rent_return_lines_original_rental_line_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rent_return_lines_pkey')
    )
    op.create_table('sales',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('invoice_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Invoice number for this sale'),
    sa.Column('customer_po_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Customer purchase order number'),
    sa.Column('sales_rep_commission', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True, comment='Sales rep commission percentage'),
    sa.Column('customer_discount_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True, comment='Customer-specific discount percentage'),
    sa.Column('shipped_date', sa.DATE(), autoincrement=False, nullable=True, comment='Date when order was shipped'),
    sa.Column('tracking_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Shipping tracking number'),
    sa.Column('carrier', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='Shipping carrier'),
    sa.Column('warranty_period_days', sa.INTEGER(), autoincrement=False, nullable=True, comment='Warranty period in days'),
    sa.ForeignKeyConstraint(['id'], ['transaction_headers.id'], name='sales_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sales_pkey'),
    sa.UniqueConstraint('invoice_number', name='sales_invoice_number_key')
    )
    op.create_table('rental_lines',
    sa.Column('id', sa.CHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('item_serial_number', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='Serial number of rented item'),
    sa.Column('item_condition_out', sa.VARCHAR(length=1), autoincrement=False, nullable=True, comment='Item condition when rented out'),
    sa.Column('item_condition_in', sa.VARCHAR(length=1), autoincrement=False, nullable=True, comment='Item condition when returned'),
    sa.Column('damage_reported', sa.BOOLEAN(), autoincrement=False, nullable=False, comment='Damage reported'),
    sa.Column('damage_description', sa.TEXT(), autoincrement=False, nullable=True, comment='Damage description'),
    sa.Column('damage_cost', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Damage repair cost'),
    sa.Column('item_late_fee', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False, comment='Late fee for this item'),
    sa.ForeignKeyConstraint(['id'], ['transaction_lines.id'], name='rental_lines_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rental_lines_pkey')
    )
    # ### end Alembic commands ###